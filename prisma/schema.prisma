generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          UserRole       @default(VIEWER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  password      String?
  accounts      Account[]
  creator       Creator?
  savedContent  SavedContent[]
  sessions      Session[]
  progress      UserProgress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Creator {
  id              String   @id @default(cuid())
  userId          String   @unique
  displayName     String
  bio             String?
  avatarUrl       String?
  showName        String?
  funnyFact       String?
  linkedinUrl     String?
  instagramUrl    String?
  tiktokUrl       String?
  websiteUrl      String?
  isActive        Boolean  @default(true)
  profileComplete Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  blogs           Blog[]
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos          Video[]
}

model Show {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String?
  thumbnailUrl String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  videos       Video[]
}

model Video {
  id             String         @id @default(cuid())
  title          String
  description    String?
  youtubeId      String         @unique
  youtubeUrl     String
  thumbnailUrl   String?
  duration       Int?
  viewCount      Int            @default(0)
  seasonNumber   Int?
  episodeNumber  Int?
  guestName      String?
  guestLinks     String[]       @default([])
  hostLinks      String[]       @default([])
  sponsorLogo    String?
  sponsorUrl     String?
  showNotes      String?
  tags           String[]
  topic          ContentTopic?
  status         ContentStatus  @default(DRAFT)
  scheduledAt    DateTime?
  publishedAt    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  creatorId      String
  showId         String?
  // New template fields
  showName       String?
  guestNames     String[]       @default([])
  guestBios      String[]       @default([])
  sponsorNames   String[]       @default([])
  sponsorMessages String[]       @default([])
  contentTopics  String[]       @default([])
  
  savedBy       SavedContent[] @relation("SavedVideos")
  videoProgress UserProgress[] @relation("VideoProgress")
  creator       Creator        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  show          Show?          @relation(fields: [showId], references: [id])
}

model Blog {
  id               String         @id @default(cuid())
  title            String
  content          String
  excerpt          String?
  featuredImage    String?
  horizontalImage  String?
  squareImages     String[]       @default([])
  viewCount        Int            @default(0)
  readTime         Int?
  hostLinks        String[]       @default([])
  sponsorLogo      String?
  sponsorUrl       String?
  tags             String[]
  topic            ContentTopic?
  status           ContentStatus  @default(DRAFT)
  scheduledAt      DateTime?
  publishedAt      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  creatorId        String
  // New template fields
  guestContributors String[]       @default([])
  guestBios         String[]       @default([])
  sponsorNames      String[]       @default([])
  sponsorMessages   String[]       @default([])
  contentTopics     String[]       @default([])
  
  creator          Creator        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  savedBy          SavedContent[] @relation("SavedBlogs")
  blogProgress     UserProgress[] @relation("BlogProgress")
}

model UserProgress {
  id              String      @id @default(cuid())
  userId          String
  videoId         String?
  blogId          String?
  contentType     ContentType
  progressSeconds Int         @default(0)
  completed       Boolean     @default(false)
  lastWatched     DateTime    @default(now())
  blog            Blog?       @relation("BlogProgress", fields: [blogId], references: [id], onDelete: Cascade)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  video           Video?      @relation("VideoProgress", fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@unique([userId, blogId])
}

model GuestViewingLimit {
  id            String   @id @default(cuid())
  sessionId     String   @unique
  viewCount     Int      @default(0)
  lastViewedAt  DateTime @default(now())
  createdAt     DateTime @default(now())
}

model SavedContent {
  id      String   @id @default(cuid())
  userId  String
  videoId String?
  blogId  String?
  savedAt DateTime @default(now())
  blog    Blog?    @relation("SavedBlogs", fields: [blogId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video   Video?   @relation("SavedVideos", fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@unique([userId, blogId])
}

enum UserRole {
  VIEWER
  CREATOR
  ADMIN
  SUPER_ADMIN
}

enum ContentStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum ContentType {
  VIDEO
  BLOG
}

enum ContentTopic {
  REENTRY
  INCARCERATION
  CRIMINAL_JUSTICE
  CRIMINAL_JUSTICE_REFORM
  ADDICTION
  RECOVERY
  FAMILY
  RELATIONSHIPS
  LAW
  GAME
  REHABILITATION
  NON_PROFIT
  READING
  POLITICS
  GENERAL
}
