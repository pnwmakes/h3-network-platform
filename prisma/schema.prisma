generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          UserRole       @default(VIEWER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  password      String?
  accounts      Account[]
  creator       Creator?
  savedContent  SavedContent[]
  sessions      Session[]
  progress      UserProgress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Creator {
  id              String   @id @default(cuid())
  userId          String   @unique
  displayName     String
  bio             String?
  avatarUrl       String?
  showName        String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  funnyFact       String?
  instagramUrl    String?
  linkedinUrl     String?
  profileComplete Boolean  @default(false)
  tiktokUrl       String?
  websiteUrl      String?
  blogs           Blog[]
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos          Video[]
  scheduledContent ScheduledContent[]
}

model Show {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String?
  thumbnailUrl String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  videos       Video[]
}

model Video {
  id              String         @id @default(cuid())
  title           String
  description     String?
  youtubeId       String         @unique
  youtubeUrl      String
  thumbnailUrl    String?
  duration        Int?
  viewCount       Int            @default(0)
  tags            String[]
  topic           ContentTopic?
  status          ContentStatus  @default(DRAFT)
  publishedAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  creatorId       String
  showId          String?
  episodeNumber   Int?
  guestLinks      String[]       @default([])
  guestName       String?
  hostLinks       String[]       @default([])
  scheduledAt     DateTime?
  seasonNumber    Int?
  showNotes       String?
  sponsorLogo     String?
  sponsorUrl      String?
  contentTopics   String[]       @default([])
  guestBios       String[]       @default([])
  guestNames      String[]       @default([])
  showName        String?
  sponsorMessages String[]       @default([])
  sponsorNames    String[]       @default([])
  savedBy         SavedContent[] @relation("SavedVideos")
  videoProgress   UserProgress[] @relation("VideoProgress")
  creator         Creator        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  show            Show?          @relation(fields: [showId], references: [id])
  scheduledContent ScheduledContent?
}

model Blog {
  id                String         @id @default(cuid())
  title             String
  content           String
  excerpt           String?
  featuredImage     String?
  viewCount         Int            @default(0)
  tags              String[]
  topic             ContentTopic?
  status            ContentStatus  @default(DRAFT)
  publishedAt       DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  creatorId         String
  horizontalImage   String?
  hostLinks         String[]       @default([])
  scheduledAt       DateTime?
  sponsorLogo       String?
  sponsorUrl        String?
  squareImages      String[]       @default([])
  contentTopics     String[]       @default([])
  guestBios         String[]       @default([])
  guestContributors String[]       @default([])
  readTime          Int?
  sponsorMessages   String[]       @default([])
  sponsorNames      String[]       @default([])
  creator           Creator        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  savedBy           SavedContent[] @relation("SavedBlogs")
  blogProgress      UserProgress[] @relation("BlogProgress")
  scheduledContent  ScheduledContent?
}

model UserProgress {
  id              String      @id @default(cuid())
  userId          String
  videoId         String?
  blogId          String?
  contentType     ContentType
  progressSeconds Int         @default(0)
  completed       Boolean     @default(false)
  lastWatched     DateTime    @default(now())
  blog            Blog?       @relation("BlogProgress", fields: [blogId], references: [id], onDelete: Cascade)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  video           Video?      @relation("VideoProgress", fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@unique([userId, blogId])
}

model GuestViewingLimit {
  id           String   @id @default(cuid())
  sessionId    String   @unique
  viewCount    Int      @default(0)
  lastViewedAt DateTime @default(now())
  createdAt    DateTime @default(now())
}

model SavedContent {
  id      String   @id @default(cuid())
  userId  String
  videoId String?
  blogId  String?
  savedAt DateTime @default(now())
  blog    Blog?    @relation("SavedBlogs", fields: [blogId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video   Video?   @relation("SavedVideos", fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@unique([userId, blogId])
}

model ScheduledContent {
  id            String        @id @default(cuid())
  contentType   ContentType
  videoId       String?
  blogId        String?
  publishAt     DateTime
  status        ScheduleStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  creatorId     String
  notes         String?
  
  // Relations
  creator       Creator       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  video         Video?        @relation(fields: [videoId], references: [id], onDelete: Cascade)
  blog          Blog?         @relation(fields: [blogId], references: [id], onDelete: Cascade)
  
  @@unique([videoId])
  @@unique([blogId])
}

enum ScheduleStatus {
  PENDING
  PUBLISHED
  FAILED
  CANCELLED
}

enum UserRole {
  VIEWER
  CREATOR
  ADMIN
  SUPER_ADMIN
}

enum ContentStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum ContentType {
  VIDEO
  BLOG
}

enum ContentTopic {
  REENTRY
  ADDICTION
  INCARCERATION
  CRIMINAL_JUSTICE_REFORM
  GENERAL
  CRIMINAL_JUSTICE
  RECOVERY
  FAMILY
  RELATIONSHIPS
  LAW
  GAME
  REHABILITATION
  NON_PROFIT
  READING
  POLITICS
}
